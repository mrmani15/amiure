{"version":3,"sources":["DetailModal.jsx","Home.jsx","App.js","serviceWorker.js","index.js"],"names":["DetailModal","data","modal","closeModal","isOpen","style","content","height","width","top","left","right","bottom","marginRight","transform","className","name","username","email","address","street","city","phone","website","company","onClick","Home","useState","setData","setErrMsg","user","setUser","setModal","useEffect","axios","get","then","res","catch","err","message","showDetail","e","JSON","parse","target","value","map","key","id","stringify","data-target","data-toggle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"+QAkDeA,EA/CK,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,KAAMC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAanC,OACE,kBAAC,IAAD,CAAOC,OAAQF,EAAOG,MAbH,CACpBC,QAAS,CACRC,OAAQ,OACRC,MAAO,OACPC,IAAK,MACLC,KAAM,MACNC,MAAO,OACPC,OAAQ,OACRC,YAAa,OACbC,UAAW,2BAKV,wBAAIC,UAAU,4BAAd,gBAEA,sCACQ,8BAAOd,EAAKe,OAEpB,yCACW,8BAAOf,EAAKgB,WAEvB,uCACS,8BAAOhB,EAAKiB,QAErB,yCACW,8BAAOjB,EAAKkB,QAAQC,OAApB,KAA8BnB,EAAKkB,QAAQE,OAEtD,uCACS,8BAAOpB,EAAKqB,QAErB,yCACW,8BAAOrB,EAAKsB,UAEvB,yCACW,8BAAOtB,EAAKuB,QAAQR,OAE/B,gCACC,4BAAQD,UAAU,kBAAkBU,QAAStB,GAA7C,YCYUuB,EAjDF,WAAO,IAAD,EACMC,mBAAS,IADf,mBACX1B,EADW,KACL2B,EADK,OAEUD,mBAAS,IAFnB,mBAEHE,GAFG,aAGOF,mBAAS,MAHhB,mBAGVG,EAHU,KAGJC,EAHI,OAISJ,oBAAS,GAJlB,mBAIVzB,EAJU,KAIH8B,EAJG,KAMlBC,qBAAU,WACTC,IACEC,IAAI,8CACJC,MAAK,SAAAC,GAAG,OAAIT,EAAQS,EAAIpC,SACxBqC,OAAM,SAAAC,GAAG,OAAIV,EAAUU,EAAIC,cAC3B,IAEH,IAAMC,EAAa,SAAAC,GAClB,IAAMzC,EAAO0C,KAAKC,MAAMF,EAAEG,OAAOC,OAC/Bf,EAAQ9B,GACR+B,GAAS,IAMX,OACC,6BACC,wBAAIjB,UAAU,mBACZd,EAAK8C,KAAI,SAAAjB,GAAI,OACb,wBACCkB,IAAKlB,EAAKmB,GACVlC,UAAU,kDAETe,EAAKd,KACN,4BACCD,UAAU,sBACV+B,MAAOH,KAAKO,UAAUpB,GACtBL,QAASgB,EACTU,cAAY,eACZC,cAAY,SALb,gBAYEtB,EAAO,kBAAC,EAAD,CAAa7B,KAAM6B,EAAM5B,MAAOA,EAAOC,WAzBlC,WACjB6B,GAAS,MAwBuE,OCnCrEqB,EATH,WACV,OACE,yBAAKtC,UAAU,sBACb,wBAAIA,UAAU,4BAAd,gBACA,kBAAC,EAAD,QCIcuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd9B,OAAM,SAAA+B,GACLC,QAAQD,MAAMA,EAAM7B,c","file":"static/js/main.c261f7a2.chunk.js","sourcesContent":["import React from 'react';\nimport Modal from 'react-modal';\n\nconst DetailModal = ({ data, modal, closeModal }) => {\n\tconst customStyles = {\n\t\tcontent: {\n\t\t\theight: 'auto',\n\t\t\twidth: 'auto',\n\t\t\ttop: '40%',\n\t\t\tleft: '50%',\n\t\t\tright: 'auto',\n\t\t\tbottom: 'auto',\n\t\t\tmarginRight: '-50%',\n\t\t\ttransform: 'translate(-50%, -50%)',\n\t\t},\n\t};\n\treturn (\n\t\t\t<Modal isOpen={modal} style={customStyles}>\n\t\t\t\t<h2 className='text-center text-success'>User Details</h2>\n\n\t\t\t\t<h4>\n\t\t\t\t\tName : <span>{data.name}</span>\n\t\t\t\t</h4>\n\t\t\t\t<h4>\n\t\t\t\t\tUsername: <span>{data.username}</span>\n\t\t\t\t</h4>\n\t\t\t\t<h4>\n\t\t\t\t\tEmail : <span>{data.email}</span>\n\t\t\t\t</h4>\n\t\t\t\t<h4>\n\t\t\t\t\tAddress : <span>{data.address.street}, {data.address.city}</span>\n\t\t\t\t</h4>\n\t\t\t\t<h4>\n\t\t\t\t\tPhone : <span>{data.phone}</span>\n\t\t\t\t</h4>\n\t\t\t\t<h4>\n\t\t\t\t\tWebsite : <span>{data.website}</span>\n\t\t\t\t</h4>\n\t\t\t\t<h4>\n\t\t\t\t\tCompany : <span>{data.company.name}</span>\n\t\t\t\t</h4>\n\t\t\t\t<center>\n\t\t\t\t\t<button className='btn btn-primary' onClick={closeModal}>\n\t\t\t\t\t\tClose\n\t\t\t\t\t</button>\n\t\t\t\t</center>\n\t\t\t</Modal>\n\t);\n};\n\nexport default DetailModal;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nimport DetailModal from './DetailModal'\n\nconst Home = () => {\n\tconst [data, setData] = useState([]);\n\tconst [errmsg, setErrMsg] = useState('');\n  const [user, setUser] = useState(null);\n  const [modal, setModal] = useState(false)\n\n\tuseEffect(() => {\n\t\taxios\n\t\t\t.get('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(res => setData(res.data))\n\t\t\t.catch(err => setErrMsg(err.message));\n\t}, []);\n\n\tconst showDetail = e => {\n\t\tconst data = JSON.parse(e.target.value);\n    setUser(data);\n    setModal(true);\n  };\n  const closeModal = () => {\n    setModal(false)\n  }\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<ul className='list-group mb-4'>\n\t\t\t\t\t{data.map(user => (\n\t\t\t\t\t\t<li\n\t\t\t\t\t\t\tkey={user.id}\n\t\t\t\t\t\t\tclassName='list-group-item d-flex justify-content-between'\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{user.name}\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName='btn btn-info btn-sm'\n\t\t\t\t\t\t\t\tvalue={JSON.stringify(user)}\n\t\t\t\t\t\t\t\tonClick={showDetail}\n\t\t\t\t\t\t\t\tdata-target='#detailModal'\n\t\t\t\t\t\t\t\tdata-toggle='modal'\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tDetails\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n        {user ? <DetailModal data={user} modal={modal} closeModal={closeModal} /> : null}\n\t\t\t</div>\n\t\t);\n\t\n};\n\nexport default Home;\n","import React from 'react';\nimport './App.css'\nimport Home from './Home'\n\nconst App = () => {\n  return(\n    <div className='container mt-3 App'>\n      <h3 className='text-center text-warning'>USER DETAILS</h3>\n      <Home/>\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}